"""
Мы сохраняем время присутствия каждого пользователя на уроке  виде интервалов.
В функцию передается словарь, содержащий три списка с таймстемпами
(время в секундах): — lesson – начало и конец урока
— pupil – интервалы присутствия ученика
— tutor – интервалы присутствия учителя
Интервалы устроены следующим образом – это всегда список из четного количества
элементов. Под четными индексами (начиная с 0) время входа на урок,
под нечетными - время выхода с урока.
Нужно написать функцию, которая получает на вход словарь
с интервалами и возвращает время общего присутствия ученика и учителя на уроке
(в секундах).

"""
result = []
keys = ['lesson', 'pupil', 'tutor']
the_received_value = []


def output_the_result():
    global result, the_received_value
    """
        создаем словарь через цикл,
        ключи: урок', 'ученик', 'репетитор',
        и выводим  на печать
        """
    ind = 0
    for l in range(len(the_received_value) // 3):
        result.append({'data': {'lesson': f'Урок длился {the_received_value[ind]} секунд "',
                                'pupil': f' Ученик был на уроке {the_received_value[ind + 1]} секунд',
                                'tutor': f' Учитель был на уроке{the_received_value[ind + 2]} секунд'
                                }})

        ind += 3

    for l, elem in enumerate(result):
        print(elem)


def data(info):
    """
    Полученный список элементов времени проходит через 2 цикла ,
    сначала мы суммируем элементы из списка, затем вычитаем,
    таким образом, мы получаем время в секундах,.
    """
    e = 0
    for i in info[1::2]:  # Каждый элемент у которого индекс нечетный.
        e = e + i
    for i in info[::2]:  # Каждый элемент у которого индекс четный.
        e = e - i

    return e  # Возвращаем полученый результат.


def appearance(intervals):
    global keys, the_received_value
    """У нас есть 3 ключа :
                              'lesson'- начало и конец урока
                              'pupil' - интервалы присутствия ученика
                              'tutor' - интервалы присутствия учителя                      
        """
    for h in keys:
        elem = data(intervals[h])  # Передаем данные для вычисления даннный
        the_received_value.append(elem)  # Добавляем в список полученый результат.


tests = [
    {'data': {'lesson': [1594663200, 1594666800],
              'pupil': [1594663340, 1594663389, 1594663390, 1594663395, 1594663396, 1594666472],
              'tutor': [1594663290, 1594663430, 1594663443, 1594666473]},
     'answer': 3117
     },
    {'data': {'lesson': [1594702800, 1594706400],
              'pupil': [1594702789, 1594704500, 1594702807, 1594704542, 1594704512, 1594704513, 1594704564, 1594705150,
                        1594704581, 1594704582, 1594704734, 1594705009, 1594705095, 1594705096, 1594705106, 1594706480,
                        1594705158, 1594705773, 1594705849, 1594706480, 1594706500, 1594706875, 1594706502, 1594706503,
                        1594706524, 1594706524, 1594706579, 1594706641],
              'tutor': [1594700035, 1594700364, 1594702749, 1594705148, 1594705149, 1594706463]},
     'answer': 3577
     },
    {'data': {'lesson': [1594692000, 1594695600],
              'pupil': [1594692033, 1594696347],
              'tutor': [1594692017, 1594692066, 1594692068, 1594696341]},
     'answer': 3565
     },
]

if __name__ == '__main__':
    # В цикле передаем в функцию словарь.
    for i, test in enumerate(tests):
        appearance(test['data'])

    output_the_result()
